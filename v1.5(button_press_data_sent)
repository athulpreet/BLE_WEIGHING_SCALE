#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <HX711.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


float getWeightReading();
bool isStable(int index);
float calculateAverage(int index);
void displayWeight(float weight);
void displaynormal(float weight);

void displayCenteredText(String message);

//buttons
#define BUTTON_PIN 34 // Set to GPIO 34
volatile bool buttonPressed = false;
volatile unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50; // Debounce time in milliseconds

void IRAM_ATTR handleButtonPress() {
    unsigned long currentTime = millis();
    if ((currentTime - lastDebounceTime) > debounceDelay) {
        buttonPressed = true;
        lastDebounceTime = currentTime;
    }
}


// OLED Display Settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// BLE Server Settings
BLEServer* pServer = nullptr;
BLECharacteristic* pCharacteristic = nullptr;
bool deviceConnected = false;
const char* characteristicUUID = "4fafc201-1fb5-459e-8fcc-c5c9c331914b";
const char* serviceUUID = "4fafc200-1fb5-459e-8fcc-c5c9c331914b";

// HX711 Settings
const int LOADCELL_DOUT_PIN = 4; 
const int LOADCELL_SCK_PIN = 5;  
HX711 scale;

// Readings Settings
const int numReadings = 13; // Buffer size for 4 previous + current + 4 future readings
float readings[numReadings]; // Array to store recent readings
int readIndex = 0; // Index for the next reading
const float fluctuationThreshold = 1.0; // Threshold for fluctuation range
bool averageIsFixed = false; // Flag for indicating if average is fixed
float fixedAverage = 0; // Variable to store fixed average
// Global variable to store the last displayed weight
float lastDisplayedWeight = 0;
bool firstRun = true;
bool blesend_flag=0;

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
    };

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
    }
};

void setup() {

   pinMode(BUTTON_PIN, INPUT); // Set the button pin as input
   attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), handleButtonPress, RISING); // Using RISING if button is connected to ground and pressed makes it HIGH
  Serial.begin(115200);

  // Initialize HX711
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.tare();

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }
 displayCenteredText("Loading");

  // Create BLE Device
  BLEDevice::init("ESP32 BLE Load Sensor");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(serviceUUID);
  pCharacteristic = pService->createCharacteristic(
                     characteristicUUID,
                     BLECharacteristic::PROPERTY_READ   |
                     BLECharacteristic::PROPERTY_WRITE  |
                     BLECharacteristic::PROPERTY_NOTIFY
                   );
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  pServer->getAdvertising()->start();
  Serial.println("Waiting for a connection...");

  // Initialize readings array
  for (int i = 0; i < numReadings; i++) {
    readings[i] = 0.0;
  }
}

void loop() {
  if (deviceConnected) {
    float currentReading = getWeightReading();

    // On first run, display the current reading and set it as the last displayed weight
    if (firstRun) {
      displayWeight(currentReading);
      lastDisplayedWeight = currentReading;
      firstRun = false;
    }
    // On subsequent runs, check if the current reading fluctuates more than 4 units
    else if (abs(currentReading - lastDisplayedWeight) > 4.0) {
blesend_flag=1;
      displayWeight(currentReading);
      lastDisplayedWeight = currentReading;
    }

     // Check button state independent of weight fluctuation
  

  // BLE Data Sending
        if (buttonPressed==1 &&blesend_flag==1) {
            float currentReading = getWeightReading();
            String dataToSend = String(currentReading, 3) + " gms";  
            pCharacteristic->setValue(dataToSend.c_str());
            pCharacteristic->notify();
displayCenteredText("SENT");
delay(2000);
displayCenteredText("occuipied");
display.clearDisplay();
            buttonPressed = false; // Reset the flag
            blesend_flag=0;
        }
  



    // Update readIndex for the next iteration
    readIndex = (readIndex + 1) % numReadings;
  } else {
    delay(10); // Slight delay when not connected
  }
}



float getWeightReading() {
  long rawValue = scale.read_average(10); // Read raw value for calibration
  //Serial.print("Raw Value: ");
  //Serial.println(rawValue);

  float weightss = (-0.01608) * rawValue - 1305.38;
  return weightss;
}

bool isStable(int index) {
  for (int i = 1; i <= 4; i++) {
    if (abs(readings[index] - readings[index - i]) > fluctuationThreshold) {
      return false;
    }
  }
  return true;
}

float calculateAverage(int index) {
  float total = 0;
  for (int i = -4; i <= 4; i++) {
    total += readings[(index + i + numReadings) % numReadings];
  }
  return total / 9.0;
}

void displayWeight(float weight) {
  display.clearDisplay();
  display.setTextSize(2);
  int16_t x, y;
  uint16_t w, h;
  String displayText = String(weight, 1) + " g";
  display.getTextBounds(displayText, 0, 0, &x, &y, &w, &h);
  int centerX = (SCREEN_WIDTH - w) / 2;
  int centerY = (SCREEN_HEIGHT - h) / 2;
  display.drawRoundRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 5, SSD1306_WHITE);
  display.setCursor(centerX, centerY);
  display.println(displayText);
  display.display();
}

void displaynormal(float weight) {
  display.clearDisplay();
  display.setTextSize(2);
  int16_t x, y;
  uint16_t w, h;
  String displayText = String(weight, 1) + " g";
  display.getTextBounds(displayText, 0, 0, &x, &y, &w, &h);
  int centerX = (SCREEN_WIDTH - w) / 2;
  int centerY = (SCREEN_HEIGHT - h) / 2;
  display.setCursor(centerX, centerY);
  display.println(displayText);
  display.display();
}






void displayCenteredText(String message) {
    display.clearDisplay(); // Clear the display

    // Set text size and color
    display.setTextSize(2); // Increase the text size
    display.setTextColor(SSD1306_WHITE); // Set text color to white

    // Calculate width and height of the text to center it
    int16_t x1, y1;
    uint16_t w, h;
    display.getTextBounds(message, 0, 0, &x1, &y1, &w, &h); // Calculate the width and height of the text
    int x = (SCREEN_WIDTH - w) / 2; // Calculate x position to center the text
    int y = (SCREEN_HEIGHT - h) / 2; // Calculate y position to center the text

    // Set cursor to calculated position
    display.setCursor(x, y);

    // Print the message
    display.println(message);

    // Optionally add some graphics
    display.drawRoundRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 5, SSD1306_WHITE); // Draw a rounded rectangle around the screen
    // Add more graphics here if desired

    // Update the display with all of the above
    display.display();
}

